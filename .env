//razorpay key

RAZORPAY_KEY_ID	= rzp_test_z5oX2eRIpY5t0C	
key_secret =  Oo2Lx0mjSCQRMYWWTFW4zfPR

CLIENT_ID=459538959268-6g3p1d353k9tfatlgln2mjivbaf94ee0.apps.googleusercontent.com
JWT_SECRET='GoldenHotel'

--------------------------------------------------------------------------------------------

// // User signup route
// app.post('/signup', async (req, res) => {
//     try {
//         const { name, email, password, phoneNumber, age } = req.body;

//         if (!name || !email || !password || !phoneNumber || !age) {
//             return res.status(400).json({ message: "Missing required fields" });
//         }

//         const salt = await bcrypt.genSalt(10);
//         const hashedPassword = await bcrypt.hash(password, salt);

//         const user = new User({
//             name,
//             email,
//             password: hashedPassword,
//             phoneNumber,
//             age,
//         });

//         const token = jwt.sign({ id: user._id, email: user.email }, "GoldenHotel", {
//             expiresIn: "10h",
//         });

//         const savedUser = await user.save();
//         res.status(201).json({
//             success: true,
//             token,
//             user: { ...savedUser },
//         });
//     } catch (error) {
//         console.error("Error creating user:", error);
//         res.status(500).json({
//             message: "Error creating user",
//             error: error.message || error,
//         });
//     }
// });

// // User login route
// app.post('/login', async (req, res) => {
//     try {
//         const { email, password } = req.body;

//         const user = await User.findOne({ email });
//         if (!user) {
//             return res.status(400).json({ message: "Invalid email or password" });
//         }

//         const isMatch = await bcrypt.compare(password, user.password);
//         if (!isMatch) {
//             return res.status(400).json({ message: "Invalid password" });
//         }

//         const token = jwt.sign({ id: user._id, email: user.email }, "GoldenHotel", {
//             expiresIn: "1h",
//         });

//         res.status(200).json({
//             success: true,
//             token,
//             user: { id: user._id, email: user.email, name: user.name },
//         });
//     } catch (error) {
//         console.error("Error logging in user:", error);
//         res.status(500).json({
//             message: "Error logging in user",
//             error: error.message || error,
//         });
//     }
// });



// Room management routes
// app.post('/room', async (req, res) => {
//     try {
//         const { category, description, capacity, area, bedSize, wifi, city, address, zipCode, price, image } = req.body;

//         if (!category || !description || !capacity || !area || !bedSize || !wifi || !city || !address || !zipCode || !price || !image) {
//             return res.status(400).json({ message: "Please provide all required fields." });
//         }

//         const newRoom = new Room({
//             category,
//             description,
//             capacity,
//             area,
//             bedSize,
//             wifi,
//             city,
//             address,
//             zipCode,
//             price,
//             image,
//             available: true,
//         });

//         await newRoom.save();
//         return res.status(201).json({ message: "Room added successfully!", room: newRoom });
//     } catch (error) {
//         console.error(error);
//         return res.status(500).json({ message: "Error adding room." });
//     }
// });

// app.post('/createRoom', async (req, res) => {
//     try {
//         const { category, description, capacity, area, bedSize, wifi, city, address, zipCode, price, image, start, end } = req.body;

//         if (!category || !description || !capacity || !area || !bedSize || !wifi || !city || !address || !zipCode || !price || !image || !start || !end) {
//             return res.status(400).json({ message: "Please provide all required fields" });
//         }

//         let roomNumbers = [];
//         for (let i = start; i <= end; i++) {
//             roomNumbers.push({ roomNo: i, bookings: [], available: true });
//         }

//         const newRoom = new Room({
//             category,
//             description,
//             capacity,
//             area,
//             bedSize,
//             wifi,
//             city,
//             address,
//             zipCode,
//             price,
//             image,
//             available: true,
//             roomNumbers
//         });

//         await newRoom.save();

//         res.status(201).json({ message: "Room created successfully!", room: newRoom });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: "Error creating room." });
//     }
// });

// // Edit room route
// app.put('/room/:id', async (req, res) => {
//     try {
//         const { id } = req.params;
//         const { category, description, capacity, area, bedSize, wifi, city, address, zipCode, price, image } = req.body;

//         const room = await Room.findByIdAndUpdate(id, {
//             category,
//             description,
//             capacity,
//             area,
//             bedSize,
//             wifi,
//             city,
//             address,
//             zipCode,
//             price,
//             image,
//         }, { new: true });

//         if (!room) {
//             return res.status(404).json({ message: "Room not found" });
//         }

//         res.json({ message: "Room updated successfully", room });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: "Server Error" });
//     }
// });

// // Delete room route
// app.delete('/room/:id', async (req, res) => {
//     try {
//         const { id } = req.params;

//         const room = await Room.findByIdAndDelete(id);

//         if (!room) {
//             return res.status(404).json({ message: "Room not found" });
//         }

//         res.json({ message: "Room deleted successfully" });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: "Server Error" });
//     }
// });


// Booking routes
// app.post('/booking/:room', async (req, res) => {
//     try {
//         const { firstName, lastName, mobile, email, country, address, zipCode, date } = req.body;
//         const userId = '67336425b3f8d02a7c2ac1db'; // Replace with actual user ID from JWT
//         const { room } = req.params;

//         if (!firstName || !lastName || !mobile || !email || !country || !address || !zipCode || !room || !date) {
//             return res.status(400).json({ message: "Please provide all required fields" });
//         }

//         const newBooking = new Booking({
//             firstName,
//             lastName,
//             mobile,
//             email,
//             date,
//             country,
//             address,
//             zipCode,
//             room,
//             user: userId,
//         });

//         await newBooking.save();

//         const updatedRoom = await Room.findByIdAndUpdate(room, { $push: { booking: newBooking._id } }, { new: true });

//         if (!updatedRoom) {
//             return res.status(404).json({ message: "Room not found" });
//         }

//         if (userId) {
//             await User.findByIdAndUpdate(userId, { $push: { bookings: newBooking._id } }, { new: true });
//         }

//         res.status(201).json({ message: "Booking created successfully!", bookings: newBooking });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: "Error creating booking." });
//     }
// });

// app.post('/booking/:room/:city', async (req, res) => {
//     try {
//         const { firstName, lastName, mobile, email, country, address, zipCode, date } = req.body;
//         const userId = '67336425b3f8d02a7c2ac1db'; // Replace with actual user ID from JWT
//         const { room, city } = req.params;

//         if (!firstName || !lastName || !mobile || !email || !country || !address || !zipCode || !room || !date || !city) {
//             return res.status(400).json({ message: "Please provide all required fields" });
//         }

//         const newBooking = new Booking({
//             firstName,
//             lastName,
//             mobile,
//             email,
//             date,
//             country,
//             address,
//             zipCode,
//             room,
//             user: userId,
//             city, // Include city in the booking document
//         });

//         await newBooking.save();

//         const updatedRoom = await Room.findByIdAndUpdate(room, { $push: { booking: newBooking._id } }, { new: true });

//         if (!updatedRoom) {
//             return res.status(404).json({ message: "Room not found" });
//         }

//         if (userId) {
//             await User.findByIdAndUpdate(userId, { $push: { bookings: newBooking._id } }, { new: true });
//         }

//         res.status(201).json({ message: "Booking created successfully!", bookings: newBooking });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: "Error creating booking." });
//     }
// });


// // Update booking route
// app.put('/booking/:id', async (req, res) => {
//     try {
//         const { id: bookingId } = req.params;
//         const { firstName, lastName, mobile, email, country, address, zipCode, cancellation, checkIn, checkOut, date } = req.body;

//         const updatedBooking = await Booking.findByIdAndUpdate(bookingId, {
//             firstName,
//             lastName,
//             mobile,
//             email,
//             date,
//             country,
//             address,
//             zipCode,
//             cancellation,
//             checkIn,
//             checkOut,
//         }, { new: true });

//         if (!updatedBooking) {
//             return res.status(404).json({ message: "Booking not found" });
//         }

//         res.json({ message: "Booking updated successfully", booking: updatedBooking });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: "Error updating booking." });
//     }
// });

// // Get booking by ID
// app.get('/booking/:id', async (req, res) => {
//     try {
//         const { id: bookingId } = req.params;

//         const booking = await Booking.findById(bookingId).populate('user room');

//         if (!booking) {
//             return res.status(404).json({ message: "Booking not found" });
//         }

//         res.json(booking);
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: "Server Error" });
//     }
// });

// // Cancel booking route
// app.patch('/booking/:id', async (req, res) => {
//     try {
//         const { id: bookingId } = req.params;

//         const updatedBooking = await Booking.findByIdAndUpdate(bookingId, { cancellation: true }, { new: true });

//         if (!updatedBooking) {
//             return res.status(404).json({ message: "Booking not found" });
//         }

//         res.json({ message: "Booking cancelled successfully", booking: updatedBooking });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: "Error cancelling booking." });
//     }
// });

// // Delete booking route
// app.delete('/booking/:id', async (req, res) => {
//     try {
//         const { id: bookingId } = req.params;

//         const booking = await Booking.findById(bookingId);
//         if (!booking) {
//             return res.status(404).json({ message: "Booking not found" });
//         }

//         const roomId = booking.room;
//         const userId = booking.user;

//         await Booking.findByIdAndDelete(bookingId);
//         await Room.findByIdAndUpdate(roomId, { $pull: { booking: bookingId } });

//         if (userId) {
//             await User.findByIdAndUpdate(userId, { $pull: { booking: bookingId } });
//         }

//         res.json({ message: "Booking deleted successfully" });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: "Error deleting booking." });
//     }
// });
